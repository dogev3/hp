// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uhjxjVT6QbAZLostZzQbnY
// Component: GScOQhOCWSccf
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: LiSRy1gX3K1f_/component
import TopSection from "../../TopSection"; // plasmic-import: 625oINhfxRLzG/component
import TopSection2 from "../../TopSection2"; // plasmic-import: zfH50axSPvl/component
import TopSection3 from "../../TopSection3"; // plasmic-import: _4SSVwbanKj/component
import TopSection4 from "../../TopSection4"; // plasmic-import: pa50bfxK1QN/component
import TopSection5 from "../../TopSection5"; // plasmic-import: fMVhuyPqRaE/component
import TopSection6 from "../../TopSection6"; // plasmic-import: q_Z45ut691D/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_dogev_3.module.css"; // plasmic-import: uhjxjVT6QbAZLostZzQbnY/projectcss
import * as sty from "./PlasmicHome.module.css"; // plasmic-import: GScOQhOCWSccf/css

export type PlasmicHome__VariantMembers = {
  toggled: "toggled";
};

export type PlasmicHome__VariantsArgs = {
  toggled?: SingleBooleanChoiceArg<"toggled">;
};

type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>("toggled");

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  topSection?: p.Flex<typeof TopSection>;
  mrna?: p.Flex<typeof TopSection2>;
  topSection3?: p.Flex<typeof TopSection3>;
  topSection4?: p.Flex<typeof TopSection4>;
  topSection5?: p.Flex<typeof TopSection5>;
  topSection6?: p.Flex<typeof TopSection6>;
};

export interface DefaultHomeProps {
  dataFetches: PlasmicHome__Fetches;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  dataFetches?: PlasmicHome__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{"DOGEV3"}</title>
        <meta key="og:title" property="og:title" content={"DOGEV3"} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={
            "Doge  + Uniswap V3 = Doge V3 ($DOGEV3) \nDoggy Coin with Pawpamentals\n\nMoon Rocket Nitro Accelerator (MRNA) Enabled\n\nThis Dog is Designed to PUMP faster than\nany other coin on Uniswap V3"
          }
        />
        <meta
          key="og:image"
          property="og:image"
          content={"/plasmic/dogev_3/images/dogev3Boxpng.png"}
        />
      </Head>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            { [sty.root__toggled]: hasVariant(variants, "toggled", "toggled") }
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__rhj85)}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header, {
                [sty.header__toggled]: hasVariant(
                  variants,
                  "toggled",
                  "toggled"
                )
              })}
              toggled={
                hasVariant(variants, "toggled", "toggled")
                  ? ("toggled" as const)
                  : undefined
              }
            />

            <TopSection
              data-plasmic-name={"topSection"}
              data-plasmic-override={overrides.topSection}
              className={classNames("__wab_instance", sty.topSection)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box___8Q72T
                )}
              >
                {
                  "DOGEV3: $0.00003\nCurrent Stage: 4\nNeed to 3x from current price to rev up to Stage 3"
                }
              </div>
            </TopSection>

            <TopSection2
              data-plasmic-name={"mrna"}
              data-plasmic-override={overrides.mrna}
              className={classNames("__wab_instance", sty.mrna)}
            />

            <TopSection3
              data-plasmic-name={"topSection3"}
              data-plasmic-override={overrides.topSection3}
              className={classNames("__wab_instance", sty.topSection3)}
            />

            <TopSection4
              data-plasmic-name={"topSection4"}
              data-plasmic-override={overrides.topSection4}
              className={classNames("__wab_instance", sty.topSection4)}
            />

            <TopSection5
              data-plasmic-name={"topSection5"}
              data-plasmic-override={overrides.topSection5}
              className={classNames("__wab_instance", sty.topSection5)}
            />

            <TopSection6
              data-plasmic-name={"topSection6"}
              data-plasmic-override={overrides.topSection6}
              className={classNames("__wab_instance", sty.topSection6)}
            />
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "topSection",
    "mrna",
    "topSection3",
    "topSection4",
    "topSection5",
    "topSection6"
  ],
  header: ["header"],
  topSection: ["topSection"],
  mrna: ["mrna"],
  topSection3: ["topSection3"],
  topSection4: ["topSection4"],
  topSection5: ["topSection5"],
  topSection6: ["topSection6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  topSection: typeof TopSection;
  mrna: typeof TopSection2;
  topSection3: typeof TopSection3;
  topSection4: typeof TopSection4;
  topSection5: typeof TopSection5;
  topSection6: typeof TopSection6;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHome__Fetches;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    topSection: makeNodeComponent("topSection"),
    mrna: makeNodeComponent("mrna"),
    topSection3: makeNodeComponent("topSection3"),
    topSection4: makeNodeComponent("topSection4"),
    topSection5: makeNodeComponent("topSection5"),
    topSection6: makeNodeComponent("topSection6"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
