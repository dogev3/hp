// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uhjxjVT6QbAZLostZzQbnY
// Component: _4SSVwbanKj
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Section from "../../Section"; // plasmic-import: Nv2df4VJh9nrf/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: cEbw2qKx5Gc4Ev/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_dogev_3.module.css"; // plasmic-import: uhjxjVT6QbAZLostZzQbnY/projectcss
import * as sty from "./PlasmicTopSection3.module.css"; // plasmic-import: _4SSVwbanKj/css
import HUni from "../../Text/HUni";
import RED from "../../Text/RED";
import HDOGE from "../../Text/HDOGE";

export type PlasmicTopSection3__VariantMembers = {};

export type PlasmicTopSection3__VariantsArgs = {};
type VariantPropType = keyof PlasmicTopSection3__VariantsArgs;
export const PlasmicTopSection3__VariantProps = new Array<VariantPropType>();

export type PlasmicTopSection3__ArgsType = {};
type ArgPropType = keyof PlasmicTopSection3__ArgsType;
export const PlasmicTopSection3__ArgProps = new Array<ArgPropType>();

export type PlasmicTopSection3__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<typeof Section>;
};

export interface DefaultTopSection3Props {
  className?: string;
}

function PlasmicTopSection3__RenderFunc(props: {
  variants: PlasmicTopSection3__VariantsArgs;
  args: PlasmicTopSection3__ArgsType;
  overrides: PlasmicTopSection3__OverridesType;
  dataFetches?: PlasmicTopSection3__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={hasVariant(globalVariants, "screen", "mobile") ? true : false}
        className={classNames(defaultcss.all, sty.box__uhQog)}
      >
        <div className={classNames(defaultcss.all, sty.box__vP6S7)} />

        <Section
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames("__wab_instance", sty.section)}
          subtitle={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__y3EH
              )}
            >
              {" "}
            </div>
          }
          title={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__mvdfl
              )}
            >
              {"Visual Illustration of MRNA on Uniswap V3"}
            </div>
          }
        />

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__lw8NT)}
        >
          <div className={classNames(defaultcss.all, sty.box__fLy9P)}>
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__mNmhI)}
              role={"img"}
              src={"/plasmic/dogev_3/images/uniswapV2Png.png"}
            />
          </div>

          <div className={classNames(defaultcss.all, sty.box__fkl5R)}>
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__xYg9Q)}
              role={"img"}
              src={"/plasmic/dogev_3/images/uniswapV212Xpng.png"}
            />
          </div>

          <div className={classNames(defaultcss.all, sty.box___8Vbgk)}>
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img___0Wx8P)}
              role={"img"}
              src={"/plasmic/dogev_3/images/uniswapV232Xpng.png"}
            />
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__y37Oq)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__gonDo
            )}
          >
            For those that want to get a little more technical:<br />If you know a thing or two about <HUni>UniswapV3</HUni>, you might find the mechanics of Doge V3 unique, interesting and full of <RED>PAWPAMENTALS</RED>. <br /><br />When one provides liquidity on <HUni>UniswapV3</HUni>, one first has to specify a price range. <br />The range for <HDOGE>DOGEV3</HDOGE> is set at <strong>15</strong>x (15 times the initial price as upper range and <strong>1/15</strong> of the initial price as lower range). When the price of <HDOGE>DOGEV3</HDOGE> hits tenbagger (or <strong>10</strong>x), <RED>MRNA</RED> automatically sets a new price range that continues along the price curve with<br />the same upper and lower bounds (i.e. <strong>15x & 1/15</strong>) and adjusts liquidity.<br /><br /> When liquidity is injected (and this is the key point) into a price range:
          </div>

          <div className={classNames(defaultcss.all, sty.box__hDyKs)}>
            <p.Stack
              as={"div"}
              hasGap={
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              }
              className={classNames(defaultcss.all, sty.box__vpDc6)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__w61TP
                )}
              >
                {"- "}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box___71Zih
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "Less liquidity is added towards the top of the range, making it easy for the price to go up "
                  : "Less liquidity is added towards the top of the range, making it easy for the price to go up "}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              }
              className={classNames(defaultcss.all, sty.box__gjY4V)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box___572RA
                )}
              >
                {"- "}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box___4FcIq
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "More liquidity is added towards the lower half of the range, making it hard for the price to go down"
                  : "More liquidity is added towards the lower half of the range, making it hard for the price to go down"}
              </div>
            </p.Stack>
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__tJdVx
            )}
          >
            You wanna know more?<br /><strong>Sometimes you have to get your paws wet and go look for yourself!</strong>
          </div>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "section"],
  section: ["section"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: typeof Section;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTopSection3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTopSection3__VariantsArgs;
    args?: PlasmicTopSection3__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTopSection3__Fetches;
  } & Omit<PlasmicTopSection3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTopSection3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTopSection3__ArgProps,
      internalVariantPropNames: PlasmicTopSection3__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTopSection3__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTopSection3";
  } else {
    func.displayName = `PlasmicTopSection3.${nodeName}`;
  }
  return func;
}

export const PlasmicTopSection3 = Object.assign(
  // Top-level PlasmicTopSection3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),

    // Metadata about props expected for PlasmicTopSection3
    internalVariantProps: PlasmicTopSection3__VariantProps,
    internalArgProps: PlasmicTopSection3__ArgProps
  }
);

export default PlasmicTopSection3;
/* prettier-ignore-end */
